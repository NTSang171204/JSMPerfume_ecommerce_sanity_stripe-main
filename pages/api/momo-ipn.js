import crypto from "crypto";

export default async function handler(req, res) {
    if (req.method !== "POST") {
        res.setHeader("Allow", "POST");
        return res.status(405).json({ message: "Method Not Allowed" });
    }

    try {
        const secretKey = process.env.NEXT_MOMO_SECRET_KEY; // Secret key c·ªßa b·∫°n
        const {
            partnerCode,
            orderId,
            requestId,
            amount,
            orderInfo,
            orderType,
            transId,
            resultCode,
            message,
            payType,
            responseTime,
            extraData,
            signature,
        } = req.body;

        console.log("IPN Received:", req.body);

        const rawSignature = `accessKey=Ekj9og2VnRfOuIys&amount=${amount}&extraData=${extraData}&orderId=${orderId}&orderInfo=${orderInfo}&orderType=${orderType}&partnerCode=${partnerCode}&requestId=${requestId}&responseTime=${responseTime}&resultCode=${resultCode}&transId=${transId}`;
        const expectedSignature = crypto.createHmac("sha256", secretKey).update(rawSignature).digest("hex");

        if (signature !== expectedSignature) {
            return res.status(400).json({ message: "Invalid signature!" });
        }

        // **2. X·ª≠ l√Ω k·∫øt qu·∫£ giao d·ªãch**
        if (resultCode === 0) {
            console.log(`üí∞ Thanh to√°n th√†nh c√¥ng! OrderId: ${orderId}, Amount: ${amount}`);
            return res.status(200).json({ message: "Transaction successful" });
            
            // ‚úÖ TODO: C·∫≠p nh·∫≠t database, ƒë√°nh d·∫•u ƒë∆°n h√†ng ƒë√£ thanh to√°n
        } else {
            console.log(`‚ùå Thanh to√°n th·∫•t b·∫°i! OrderId: ${orderId}, L·ªói: ${message}`);
            return res.status(400).json({ message: "Transaction failed" });
            // ‚úÖ TODO: X·ª≠ l√Ω khi thanh to√°n th·∫•t b·∫°i (c√≥ th·ªÉ l∆∞u tr·∫°ng th√°i v√†o DB)
        }

    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω IPN:", error);
        return res.status(500).json({ message: "Internal Server Error" });
    }
}
